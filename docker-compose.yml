services:
  # Frontend Next.js Application
  smartcloudops-frontend:
    build:
      context: ./frontend_review
      dockerfile: Dockerfile
    container_name: smartcloudops-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://smartcloudops-main:5000
      - NODE_ENV=production
    depends_on:
      - smartcloudops-main
    networks:
      - cloudops-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Main Flask Application
  smartcloudops-main:
    build: .
    container_name: smartcloudops-main
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - FLASK_ENV=production
      - FLASK_PORT=5000
      - FLASK_HOST=0.0.0.0
      - PROMETHEUS_URL=http://prometheus:9090
      - REQUIRE_APPROVAL=false
      - MAX_ACTIONS_PER_HOUR=3
      - COOLDOWN_MINUTES=10
      - REMEDIATION_TAG_KEY=Name
      - REMEDIATION_TAG_VALUE=smartcloudops-ai-application
      - SSM_SERVICE_NAME=smartcloudops-app
      - AWS_REGION=ap-south-1
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - DATABASE_URL=${DATABASE_URL:-postgresql+psycopg://cloudops:cloudops_postgres_2024@postgres:5432/cloudops}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DISABLE_AWS_SERVICES=true
      - DISABLE_ELASTICSEARCH=true
      - USE_LOCAL_STORAGE=true
      - FLASK_DEBUG=false
      - CORS_ORIGINS=http://localhost:3000,http://smartcloudops-frontend:3000
      - CORS_SUPPORTS_CREDENTIALS=true
      - SECURITY_HEADERS_ENABLED=true
      - RATE_LIMIT_ENABLED=true
      - CACHE_ENABLED=true
      - AI_PROVIDER=local
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - ./app:/app/app
      - ./scripts:/app/scripts
      - ./ml_models:/app/ml_models
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
    networks:
      - cloudops-network

  # Redis Cache Service  
  redis:
    image: redis:7-alpine
    container_name: redis-cache-server
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - cloudops-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-server
    ports:
      - "9090:9090"
    volumes:
      - ./terraform/configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cloudops-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dashboard
    ports:
      - "13000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./terraform/configs/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./terraform/configs/grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./terraform/configs/grafana-dashboard-system-overview.json:/etc/grafana/provisioning/dashboards/grafana-dashboard-system-overview.json:ro
      - ./terraform/configs/grafana-dashboard-prometheus-monitoring.json:/etc/grafana/provisioning/dashboards/grafana-dashboard-prometheus-monitoring.json:ro
    depends_on:
      - prometheus
    networks:
      - cloudops-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Postgres for development persistence
  postgres:
    image: postgres:17-alpine
    container_name: postgres-database
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-cloudops}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cloudops}
      - POSTGRES_DB=${POSTGRES_DB:-cloudops}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - cloudops-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-app
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - cloudops-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
  redis_data:

networks:
  cloudops-network:
    driver: bridge