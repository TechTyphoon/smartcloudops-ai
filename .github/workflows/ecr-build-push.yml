name: Build and Push to ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'Dockerfile.production'
      - '.github/workflows/ecr-build-push.yml'
  workflow_dispatch: # Allow manual trigger

jobs:
  # Note: This job requires AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets to be configured
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'smartcloudops-ai-app' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          REPO_NAME=${ECR_REPOSITORY}
          # Enable Docker BuildKit with inline SBOM and provenance if desired
          export DOCKER_BUILDKIT=1
          docker build -f Dockerfile.production -t $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG $ECR_REGISTRY/$REPO_NAME:latest
          docker push $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPO_NAME:latest

      - name: Scan image with Trivy (fail on CRITICAL/HIGH)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

