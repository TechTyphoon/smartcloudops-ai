name: Security & Compliance Monitoring

on:
  # Run security scans on schedule
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  # Allow manual security scans
  workflow_dispatch:
  # Scan on security-sensitive changes
  push:
    paths:
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'app/**'
      - '.github/workflows/**'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: üì¶ Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
        
    - name: üîç Basic security scan (Bandit)
      run: |
        echo "::group::Python security scan"
        bandit -r app/ -f json -o bandit-results.json || true
        bandit -r app/ --severity-level high --skip B104 || echo "Security issues found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üîí Deep Bandit scan
      run: |
        echo "::group::Python security scan"
        bandit -r app/ -f json -o bandit-deep.json || true
        bandit -r app/ --severity-level low --confidence-level medium || echo "Deep security scan issues found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üõ°Ô∏è Comprehensive dependency check
      run: |
        echo "::group::Dependency vulnerabilities"
        safety scan --json > safety-comprehensive.json || true
        safety scan --full-report || echo "Some vulnerabilities found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üîç Secret scanning
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true
        
    - name: üì§ Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-security-scan-${{ github.run_number }}
        path: |
          bandit-deep.json
          safety-comprehensive.json
        retention-days: 90

  dependency-review:
    name: üîç Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üîç Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        
  docker-security:
    name: üê≥ Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üèóÔ∏è Build Docker image
      run: |
        # Check if Dockerfile.production exists, otherwise use Dockerfile
        if [ -f "Dockerfile.production" ]; then
          DOCKERFILE="Dockerfile.production"
        else
          DOCKERFILE="Dockerfile"
        fi
        echo "Building Docker image using $DOCKERFILE"
        docker build -f $DOCKERFILE -t security-scan:latest . || echo "Docker build failed, but continuing..."
      continue-on-error: true
        
    - name: üîç Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-scan:latest'
        format: 'sarif'
        output: 'docker-security.sarif'
      continue-on-error: true
        
    - name: üì§ Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('docker-security.sarif') != ''
      with:
        sarif_file: 'docker-security.sarif'

  infrastructure-security:
    name: üèóÔ∏è Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üîß Setup tools
      run: |
        # Install terraform security scanners
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash || echo "tfsec installation failed, but continuing..."
        
    - name: üîç Terraform security scan
      run: |
        echo "::group::Terraform security scan"
        if command -v tfsec &> /dev/null; then
          tfsec terraform/ --format=json --out=tfsec-results.json || true
          tfsec terraform/ || echo "Terraform security issues found, but continuing..."
        else
          echo "tfsec not available, skipping Terraform security scan"
        fi
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üîç Kubernetes security scan
      run: |
        echo "::group::Kubernetes manifests security"
        # Install kubesec
        wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz || echo "kubesec download failed, but continuing..."
        tar -xzf kubesec_linux_amd64.tar.gz || echo "kubesec extraction failed, but continuing..."
        
        # Scan k8s manifests
        if [ -d "k8s" ]; then
          for file in k8s/*.yaml; do
            if [ -f "$file" ]; then
              echo "Scanning $file"
              ./kubesec scan "$file" || echo "kubesec scan failed for $file, but continuing..."
            fi
          done
        else
          echo "k8s directory not found, skipping Kubernetes security scan"
        fi
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üì§ Upload infrastructure scan results  
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-security-${{ github.run_number }}
        path: |
          tfsec-results.json
        retention-days: 90
