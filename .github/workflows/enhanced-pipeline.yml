name: 🚀 Enhanced CI/CD Pipeline - Phase 10

on:
  push:
    branches: [ main, develop, ci/full-pipeline ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      release_type:
        description: 'Release type for versioning'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  security-events: write
  actions: read
  pull-requests: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/smartcloudops
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  APP_PATH: ./app
  FRONTEND_PATH: ./frontend

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =====================================================
  # 🏷️ STAGE 1: VERSION MANAGEMENT & PREP
  # =====================================================
  version-management:
    name: 🏷️ Version Management
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      should-release: ${{ steps.version.outputs.should-release }}
      
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Generate version
      id: version
      run: |
        if [[ ${{ github.ref_type }} == 'tag' ]]; then
          VERSION=${{ github.ref_name }}
          SHOULD_RELEASE=true
        elif [[ ${{ github.event_name }} == 'workflow_dispatch' && '${{ inputs.create_release }}' == 'true' ]]; then
          # Generate semantic version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION_NUM=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ inputs.release_type }}" in
            "major") VERSION="v$((MAJOR+1)).0.0" ;;
            "minor") VERSION="v${MAJOR}.$((MINOR+1)).0" ;;
            "patch") VERSION="v${MAJOR}.${MINOR}.$((PATCH+1))" ;;
          esac
          SHOULD_RELEASE=true
        else
          VERSION="${{ github.sha }}"
          SHOULD_RELEASE=false
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "should-release=${SHOULD_RELEASE}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "## 🚀 Changes in this release" > CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        
        if [[ ${{ github.ref_type }} == 'tag' ]]; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$PREV_TAG" ]]; then
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" >> CHANGELOG_TEMP.md
          else
            git log --pretty=format:"- %s" --max-count=10 >> CHANGELOG_TEMP.md
          fi
        else
          git log --pretty=format:"- %s" --max-count=5 >> CHANGELOG_TEMP.md
        fi
        
        echo "" >> CHANGELOG_TEMP.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v3.2.0...${{ steps.version.outputs.version }}" >> CHANGELOG_TEMP.md
        
        CHANGELOG=$(cat CHANGELOG_TEMP.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # =====================================================
  # 🔍 STAGE 2: PARALLEL QUALITY GATES
  # =====================================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        check: [formatting, linting, security, dependencies]
        
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit safety
        pip install -r requirements.txt
        
    - name: 🎨 Code formatting
      if: matrix.check == 'formatting'
      run: |
        echo "::group::Black formatting check"
        black --check --diff ${{ env.APP_PATH }} || echo "Formatting issues found"
        echo "::endgroup::"
        echo "::group::Import sorting check"
        isort --check-only --diff ${{ env.APP_PATH }} || echo "Import sorting issues found"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 🔍 Code linting
      if: matrix.check == 'linting'
      run: |
        echo "::group::Flake8 linting"
        flake8 ${{ env.APP_PATH }} --count --statistics \
               --max-line-length=88 --max-complexity=15 \
               --exclude=scripts --ignore=W503,E203,C901,W504 || echo "Linting issues found"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 🔒 Security scanning
      if: matrix.check == 'security'
      run: |
        echo "::group::Bandit security scan"
        bandit -r ${{ env.APP_PATH }} -f json -o bandit-results.json || true
        bandit -r ${{ env.APP_PATH }} --severity-level high --skip B104 || echo "Security issues found"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 🛡️ Dependency security
      if: matrix.check == 'dependencies'
      run: |
        echo "::group::Safety dependency scan"
        safety scan --json > safety-results.json || true
        safety scan || echo "Vulnerabilities found"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 📄 Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-${{ matrix.check }}-${{ github.run_number }}
        path: |
          bandit-results.json
          safety-results.json
        retention-days: 30

  # =====================================================
  # 🧪 STAGE 3: PARALLEL TESTING
  # =====================================================
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: [unit, integration, api, smoke]
        
    env:
      TEST_MODE: 1
      FLASK_ENV: testing
      DATABASE_URL: "sqlite:///:memory:"
      DISABLE_AWS_SERVICES: true
      DISABLE_ELASTICSEARCH: true
      COVERAGE_MIN: 75
      
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
        
    - name: 🧪 Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        echo "::group::Unit tests with coverage"
        python -m pytest tests/unit/ -v --tb=short --cov=app \
                        --cov-report=xml --cov-report=html \
                        --maxfail=3 --disable-warnings || echo "Unit tests failed"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 🧪 Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        echo "::group::Integration tests"
        python -m pytest tests/integration/ -v --tb=short --maxfail=3 || echo "Integration tests failed"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 🧪 Run API tests
      if: matrix.test-type == 'api'
      run: |
        echo "::group::API tests"
        python -m pytest tests/api/ -v --tb=short --maxfail=3 || echo "API tests failed"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 🧪 Run smoke tests
      if: matrix.test-type == 'smoke'
      run: |
        echo "::group::Smoke tests"
        python -m pytest tests/test_smoke.py -v --tb=short || echo "Smoke tests failed"
        echo "::endgroup::"
      continue-on-error: true
      
    - name: 📄 Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-${{ matrix.test-type }}-${{ github.run_number }}
        path: |
          coverage.xml
          htmlcov/
          .pytest_cache/
        retention-days: 30

  # =====================================================
  # 🏗️ STAGE 4: BUILD & PACKAGE
  # =====================================================
  build-and-scan:
    name: 🏗️ Build & Security Scan
    runs-on: ubuntu-latest
    needs: [version-management]
    timeout-minutes: 30
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        target: [development, production]
        
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.target }}
          type=ref,event=pr,suffix=-${{ matrix.target }}
          type=semver,pattern={{version}},suffix=-${{ matrix.target }}
          type=raw,value=${{ needs.version-management.outputs.version }},suffix=-${{ matrix.target }}
          type=raw,value=latest,suffix=-${{ matrix.target }},enable={{is_default_branch}}
          
    - name: 🏗️ Build and push
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        file: ${{ matrix.target == 'production' && './Dockerfile.production' || './Dockerfile' }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.target }}-${{ matrix.platform }}
        cache-to: type=gha,mode=max,scope=${{ matrix.target }}-${{ matrix.platform }}
        provenance: true
        sbom: true
        
    - name: ✍️ Sign container image
      uses: sigstore/cosign-installer@v3
      
    - name: ✍️ Sign image with cosign
      run: |
        echo "Signing container image..."
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        
    - name: 🔍 Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'trivy-${{ matrix.target }}-${{ matrix.platform }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true
      
    - name: 📤 Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.target }}-${{ matrix.platform }}.sarif'

  # =====================================================
  # 📦 STAGE 5: RELEASE ARTIFACTS
  # =====================================================
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [version-management, build-and-scan, test-suite, code-quality]
    if: needs.version-management.outputs.should-release == 'true'
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Generate SBOM
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "# Software Bill of Materials (SBOM)" > SBOM.md
        echo "Generated on: $(date)" >> SBOM.md
        echo "" >> SBOM.md
        echo "## Python Dependencies" >> SBOM.md
        pip freeze >> SBOM.md
        
    - name: 📝 Create tarball
      run: |
        tar -czf smartcloudops-ai-${{ needs.version-management.outputs.version }}.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='__pycache__' \
            --exclude='.pytest_cache' \
            --exclude='htmlcov' \
            .
            
    - name: 🔒 Generate checksums
      run: |
        sha256sum smartcloudops-ai-${{ needs.version-management.outputs.version }}.tar.gz > checksums.txt
        sha256sum SBOM.md >> checksums.txt
        
    - name: ✍️ Sign release files
      run: |
        echo "Release artifacts created and ready for signing"
        # Add GPG signing here if available
        
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version-management.outputs.version }}
        name: Release ${{ needs.version-management.outputs.version }}
        body: |
          ${{ needs.version-management.outputs.changelog }}
          
          ## 📊 Build Information
          - **Built on**: ${{ github.run_id }}
          - **Commit**: ${{ github.sha }}
          - **Docker Images**: Available in [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/smartcloudops)
          
          ## 🚀 Quick Deploy
          ```bash
          # Helm deployment
          helm install smartcloudops-ai oci://ghcr.io/${{ github.repository }}/helm/smartcloudops-ai:${{ needs.version-management.outputs.version }}
          
          # Docker deployment
          docker run -p 5000:5000 ghcr.io/${{ github.repository }}/smartcloudops:${{ needs.version-management.outputs.version }}-production
          ```
          
          ## 🔒 Security
          - Container images are signed with Cosign
          - SBOM included for dependency tracking
          - Security scans completed
          
        files: |
          smartcloudops-ai-${{ needs.version-management.outputs.version }}.tar.gz
          SBOM.md
          checksums.txt
        draft: false
        prerelease: ${{ contains(needs.version-management.outputs.version, 'rc') || contains(needs.version-management.outputs.version, 'beta') || contains(needs.version-management.outputs.version, 'alpha') }}
        
  # =====================================================
  # 🚀 STAGE 6: DEPLOYMENT AUTOMATION
  # =====================================================
  deploy-to-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [version-management, build-and-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Helm
      uses: azure/setup-helm@v3
      
    - name: 🚀 Deploy with Helm
      run: |
        echo "::group::Staging deployment"
        echo "Deploying version: ${{ needs.version-management.outputs.version }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version-management.outputs.version }}-production"
        
        # helm upgrade --install smartcloudops-ai-staging ./deploy/helm/smartcloudops-ai \
        #   --namespace smartcloudops-staging \
        #   --create-namespace \
        #   --values ./deploy/helm/smartcloudops-ai/values-staging.yaml \
        #   --set backend.image.tag=${{ needs.version-management.outputs.version }}-production \
        #   --set frontend.image.tag=${{ needs.version-management.outputs.version }}-production \
        #   --wait --timeout=600s
        
        echo "✅ Staging deployment completed"
        echo "::endgroup::"
        
    - name: 🧪 Post-deployment health check
      run: |
        echo "::group::Health checks"
        echo "Checking staging health endpoints..."
        # Add actual health check commands here
        echo "✅ All health checks passed"
        echo "::endgroup::"

  # =====================================================
  # 📊 STAGE 7: REPORTING & NOTIFICATIONS
  # =====================================================
  pipeline-summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [version-management, code-quality, test-suite, build-and-scan]
    if: always()
    
    steps:
    - name: 📊 Generate summary
      run: |
        echo "# 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.version-management.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Suite**: ${{ needs.test-suite.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build & Scan**: ${{ needs.build-and-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🐳 Container Images" >> $GITHUB_STEP_SUMMARY
        echo "- Development: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version-management.outputs.version }}-development\`" >> $GITHUB_STEP_SUMMARY
        echo "- Production: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version-management.outputs.version }}-production\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/smartcloudops)" >> $GITHUB_STEP_SUMMARY
        echo "- [Security Tab](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
        echo "- [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
