name: 🚀 Enhanced CI/CD Pipeline - Phase 10

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/smartcloudops
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  APP_PATH: ./app
  FRONTEND_PATH: ./smartcloudops-ai

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =====================================================
  # 🔍 STAGE 1: CODE QUALITY & SECURITY
  # =====================================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit safety
        pip install -r requirements.txt
        
    - name: 🎨 Code formatting
      run: |
        echo "::group::Black formatting check"
        echo "🛡️ QUALITY GATE: Black formatting violations will fail the build"
        black --check --diff ${{ env.APP_PATH }}
        echo "✅ Black formatting: PASSED"
        echo "::endgroup::"
        echo "::group::Import sorting check"
        echo "🛡️ QUALITY GATE: Import sorting violations will fail the build"
        isort --check-only --diff ${{ env.APP_PATH }}
        echo "✅ Import sorting: PASSED"
        echo "::endgroup::"
      
    - name: 🔍 Code linting
      run: |
        echo "::group::Flake8 linting"
        echo "🛡️ QUALITY GATE: Code quality violations will fail the build"
        flake8 ${{ env.APP_PATH }} --count --statistics \
               --max-line-length=88 --max-complexity=15 \
               --exclude=scripts --ignore=W503,E203,C901,W504 \
               --show-source
        echo "✅ Code linting: PASSED"
        echo "::endgroup::"
      
    - name: 🔒 Security scanning
      run: |
        echo "::group::Bandit security scan"
        echo "🛡️ QUALITY GATE: High severity security issues will fail the build"
        bandit -r ${{ env.APP_PATH }} -f json -o bandit-results.json
        bandit -r ${{ env.APP_PATH }} --severity-level high --skip B104
        echo "✅ Security scan: PASSED"
        echo "::endgroup::"
      
    - name: 🛡️ Dependency security
      run: |
        echo "::group::Safety dependency scan"
        echo "🛡️ QUALITY GATE: Known vulnerabilities will fail the build"
        safety scan --json > safety-results.json
        safety scan
        echo "✅ Dependency security: PASSED"
        echo "::endgroup::"
      
    - name: 📄 Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          bandit-results.json
          safety-results.json
        retention-days: 30

  # =====================================================
  # 🧪 STAGE 2: TESTING
  # =====================================================
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: 🧪 Run tests
      run: |
        echo "::group::Running tests"
        echo "🛡️ QUALITY GATE: Test failures will fail the build"
        pytest tests/ -v --cov=${{ env.APP_PATH }} --cov-report=xml --cov-report=term-missing --maxfail=1
        echo "✅ Tests: PASSED"
        echo "::endgroup::"
      
    - name: 📊 Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: coverage.xml
        retention-days: 30

  # =====================================================
  # 🐳 STAGE 3: BUILD & SCAN
  # =====================================================
  build-and-scan:
    name: 🐳 Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite]
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail on critical/high vulnerabilities
      
    - name: 🐳 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: 📄 Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts
        path: |
          trivy-results.sarif
        retention-days: 30

  # =====================================================
  # 📊 STAGE 4: REPORTING
  # =====================================================
  pipeline-summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite, build-and-scan]
    if: always()
    
    steps:
    - name: 📊 Generate summary
      run: |
        echo "# 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Suite**: ${{ needs.test-suite.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build & Scan**: ${{ needs.build-and-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🐳 Container Images" >> $GITHUB_STEP_SUMMARY
        echo "- Latest: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/smartcloudops)" >> $GITHUB_STEP_SUMMARY
        echo "- [Security Tab](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
        echo "- [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
