name: SmartCloudOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        output-format: sarif
        output-file: semgrep-results.sarif
        
    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-results.sarif

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET_KEY: test-secret-key
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET_KEY: test-secret-key
      run: |
        pytest tests/integration/ -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Load Testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install aiohttp asyncio
        
    - name: Run load tests
      run: |
        python scripts/load_test.py --endpoint http://localhost:5000 --scenario peak_load --duration 300

  # Build and Push Docker Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push main app
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push ML models
      uses: docker/build-push-action@v5
      with:
        context: ./ml_models
        file: ./ml_models/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ml:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name smartcloudops-staging --region ${{ secrets.AWS_REGION }}
      
    - name: Deploy to staging
      run: |
        kubectl apply -f k8s/namespace_quota_limits.yaml
        kubectl apply -f k8s/postgres_ha.yaml
        kubectl apply -f k8s/redis_cluster.yaml
        kubectl apply -f k8s/app.yaml
        kubectl apply -f k8s/monitoring.yaml
        
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/smartcloudops-app -n smartcloudops
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n smartcloudops
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n smartcloudops
        
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        # Test health endpoints
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://smartcloudops-app:80/health
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://prometheus:9090/-/healthy

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name smartcloudops-production --region ${{ secrets.AWS_REGION }}
      
    - name: Deploy to production
      run: |
        kubectl apply -f k8s/namespace_quota_limits.yaml
        kubectl apply -f k8s/postgres_ha.yaml
        kubectl apply -f k8s/redis_cluster.yaml
        kubectl apply -f k8s/app.yaml
        kubectl apply -f k8s/monitoring.yaml
        
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/smartcloudops-app -n smartcloudops
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n smartcloudops
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n smartcloudops
        
    - name: Run production validation
      run: |
        # Wait for services to be ready
        sleep 120
        # Test critical endpoints
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://smartcloudops-app:80/health
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://smartcloudops-app:80/api/status
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://prometheus:9090/-/healthy
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://grafana:3000/api/health

  # Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: failure()
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Update kubeconfig
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          aws eks update-kubeconfig --name smartcloudops-production --region ${{ secrets.AWS_REGION }}
        else
          aws eks update-kubeconfig --name smartcloudops-staging --region ${{ secrets.AWS_REGION }}
        fi
        
    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/smartcloudops-app -n smartcloudops
        kubectl rollout status deployment/smartcloudops-app -n smartcloudops
        
    - name: Notify rollback
      run: |
        echo "🚨 Deployment rollback completed for ${{ github.ref }}"
        # Add notification logic here (Slack, email, etc.)

  # Performance Monitoring
  performance-monitor:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: success()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests prometheus-api-client
        
    - name: Monitor performance metrics
      run: |
        python scripts/performance_monitor.py --environment ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        
    - name: Generate performance report
      run: |
        python scripts/generate_performance_report.py --output performance-report.html

  # Security Post-Deployment Check
  security-post-deploy:
    name: Post-Deployment Security Check
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: success()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run container vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'container-vulnerabilities.sarif'
        
    - name: Run infrastructure security scan
      run: |
        # Scan Kubernetes configurations
        kubectl get all -n smartcloudops -o yaml > k8s-current-state.yaml
        python scripts/security_audit.py --k8s-config k8s-current-state.yaml
        
    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: container-vulnerabilities.sarif
