name: Reusable Workflows

on:
  workflow_call:

# =====================================================
# üîß REUSABLE JOBS FOR OTHER WORKFLOWS
# =====================================================

jobs:
  # =====================================================
  # üêç PYTHON SETUP JOB
  # =====================================================
  setup-python:
    name: üêç Setup Python Environment
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.version.outputs.python-version }}
      cache-key: ${{ steps.cache.outputs.cache-key }}
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      id: version
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || echo "requirements-dev.txt not found"
        
    - name: üîë Generate cache key
      id: cache
      run: |
        CACHE_KEY="python-${{ runner.os }}-${{ steps.version.outputs.python-version }}-${{ hashFiles('requirements*.txt') }}"
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT

  # =====================================================
  # üîç CODE QUALITY JOB
  # =====================================================
  code-quality:
    name: üîç Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup-python
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'
        
    - name: ‚ö° Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit safety
        
    - name: üé® Code formatting (Black)
      run: |
        echo "::group::Checking code formatting"
        black --check --diff app/ || echo "Black formatting issues found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üìê Import sorting (isort) 
      run: |
        echo "::group::Checking import order"
        isort --check-only --diff app/ || echo "Import sorting issues found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üîç Linting (Flake8)
      run: |
        echo "::group::Code linting"
        flake8 app/ --count --statistics \
               --max-line-length=88 --max-complexity=15 \
               --exclude=scripts \
               --ignore=W503,E203,C901,W504 || echo "Linting issues found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true

  # =====================================================
  # üîí SECURITY SCAN JOB
  # =====================================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: setup-python
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'
        
    - name: üì¶ Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
        
    - name: üîç Python security scan
      run: |
        echo "::group::Python security scanning"
        bandit -r app/ -f json -o bandit-results.json || true
        bandit -r app/ --severity-level high --skip B104 || echo "Security issues found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üõ°Ô∏è Dependency security
      run: |
        echo "::group::Dependency vulnerabilities"
        safety scan --json > safety-results.json || true
        safety scan || echo "Some vulnerabilities found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üìÑ Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-results.json
          safety-results.json
        retention-days: 30

  # =====================================================
  # üß™ TEST JOB
  # =====================================================
  run-tests:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: setup-python
    
    env:
      TEST_MODE: 1
      FLASK_ENV: testing
      FLASK_PORT: 5000
      FLASK_HOST: 127.0.0.1
      AI_PROVIDER: local
      DISABLE_AWS_SERVICES: true
      DISABLE_ELASTICSEARCH: true
      USE_LOCAL_STORAGE: true
      DATABASE_URL: "sqlite:///:memory:"
      OPENAI_API_KEY: test-key
      GEMINI_API_KEY: test-key
      REDIS_PASSWORD: test-password
      SECRET_KEY: test-secret-key-for-testing-only-32-chars-minimum
      JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only-32-chars-minimum
      COVERAGE_MIN: 80
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || echo "requirements-dev.txt not found"
        
    - name: üß™ Run tests with coverage
      run: |
        echo "::group::Running tests with coverage"
        python -m pytest tests/ -v --tb=short --cov=app \
                        --cov-report=xml --cov-report=html --cov-report=term \
                        --maxfail=1 || echo "Tests failed, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: üìä Check coverage threshold
      run: |
        echo "::group::Coverage analysis"
        if [ -f "coverage.xml" ]; then
          COVERAGE_PERCENT=$(python -c "import xml.etree.ElementTree as ET; root = ET.parse('coverage.xml').getroot(); line_rate = float(root.attrib.get('line-rate', 0)); print(f'{line_rate * 100:.1f}')")
          echo "Coverage: ${COVERAGE_PERCENT}% (target: ${COVERAGE_MIN}%)"
          if (( $(echo "$COVERAGE_PERCENT < $COVERAGE_MIN" | bc -l) )); then
            echo "‚ùå Coverage below threshold"
            exit 1
          else
            echo "‚úÖ Coverage target met"
          fi
        else
          echo "No coverage report found"
        fi
        echo "::endgroup::"
        
    - name: üìÑ Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          coverage.xml
          htmlcov/
          .pytest_cache/
        retention-days: 30

  # =====================================================
  # üèóÔ∏è DOCKER BUILD JOB
  # =====================================================
  build-docker:
    name: üèóÔ∏è Build Docker Image
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target: [development, production]
        
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîë Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/smartcloudops
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.target }}
          type=ref,event=pr,suffix=-${{ matrix.target }}
          type=semver,pattern={{version}},suffix=-${{ matrix.target }}
          type=sha,suffix=-${{ matrix.target }}
          
    - name: üèóÔ∏è Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.target == 'production' && './Dockerfile.production' || './Dockerfile' }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: üîç Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}/smartcloudops:${{ github.sha }}-${{ matrix.target }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.target }}.sarif'
      continue-on-error: true
        
    - name: üì§ Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results-${{ matrix.target }}.sarif') != ''
      with:
        sarif_file: 'trivy-results-${{ matrix.target }}.sarif'
