name: Application CI/CD

on:
  push:
    branches: [ main, dev, app/chatops ]
    paths:
      - 'app/**'
      - 'scripts/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'pytest.ini'
      - '.github/workflows/ci-app.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'scripts/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'pytest.ini'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
      timeout-minutes: 10

    - name: Lint with flake8
      run: |
        flake8 app/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check app/ scripts/

    - name: Sort imports check with isort
      run: |
        isort --profile black --check-only app/ scripts/

    - name: Run tests with pytest
      run: |
        pytest --cov=app --cov-report=xml
      env:
        PYTHONPATH: .

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create minimal .env file for build
      run: |
        echo "# Minimal .env file for CI/CD build" > .env
        echo "FLASK_ENV=production" >> .env
        echo "FLASK_DEBUG=false" >> .env
        echo "AI_PROVIDER=auto" >> .env
        echo "OPENAI_API_KEY=" >> .env
        echo "GEMINI_API_KEY=" >> .env

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: smartcloudops-ai:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r app/ scripts/ -f json -o bandit-report.json || true

    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true