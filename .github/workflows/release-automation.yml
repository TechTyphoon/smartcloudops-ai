name: 🚀 Automated Release Management

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      pre_release:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/smartcloudops

jobs:
  # =====================================================
  # 🔍 VALIDATE RELEASE
  # =====================================================
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_type: ${{ steps.version.outputs.release_type }}
      is_pre_release: ${{ steps.version.outputs.is_pre_release }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Extract version information
      id: version
      run: |
        if [[ ${{ github.ref_type }} == 'tag' ]]; then
          VERSION=${{ github.ref_name }}
        else
          VERSION=${{ inputs.version }}
        fi
        
        # Validate semantic version format
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z[-prerelease][+build]"
          exit 1
        fi
        
        # Extract release type
        if [[ $VERSION =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          
          if [[ $MAJOR -gt 0 ]]; then
            RELEASE_TYPE="major"
          elif [[ $MINOR -gt 0 ]]; then
            RELEASE_TYPE="minor"
          else
            RELEASE_TYPE="patch"
          fi
        else
          RELEASE_TYPE="unknown"
        fi
        
        # Check if pre-release
        if [[ $VERSION =~ - ]]; then
          IS_PRE_RELEASE="true"
        else
          IS_PRE_RELEASE="false"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "release_type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
        echo "is_pre_release=${IS_PRE_RELEASE}" >> $GITHUB_OUTPUT
        
        echo "✅ Version validation passed"
        echo "Version: ${VERSION}"
        echo "Release Type: ${RELEASE_TYPE}"
        echo "Pre-release: ${IS_PRE_RELEASE}"

  # =====================================================
  # 📋 GENERATE CHANGELOG
  # =====================================================
  generate-changelog:
    name: 📋 Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 15
    
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      release_notes: ${{ steps.changelog.outputs.release_notes }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: 📦 Install changelog tools
      run: |
        pip install conventional-changelog-writer
        pip install git-changelog
        
    - name: 📋 Generate changelog
      id: changelog
      run: |
        echo "::group::Generating changelog"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, generating full changelog"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Generating changelog from $PREVIOUS_TAG to ${{ needs.validate-release.outputs.version }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
        fi
        
        # Generate release notes using script
        chmod +x scripts/generate-release-notes.sh
        RELEASE_NOTES=$(scripts/generate-release-notes.sh "${{ needs.validate-release.outputs.version }}" "${{ needs.validate-release.outputs.release_type }}" "${{ needs.validate-release.outputs.is_pre_release }}" "$CHANGELOG")
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "✅ Changelog generated"
        echo "::endgroup::"

  # =====================================================
  # 🏷️ CREATE RELEASE
  # =====================================================
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, generate-changelog]
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🏷️ Create GitHub Release
      run: |
        echo "::group::Creating GitHub Release"
        # Authenticate GitHub CLI
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

        # Prepare release notes (escape newlines for CLI)
        RELEASE_NOTES=$(echo "${{ needs.generate-changelog.outputs.release_notes }}" | sed 's/"/\\"/g' | tr '\n' '\\n')

        # Create release using GitHub CLI (modern approach)
        gh release create "${{ needs.validate-release.outputs.version }}" \
          --title "Release ${{ needs.validate-release.outputs.version }}" \
          --notes "$RELEASE_NOTES" \
          --latest=false \
          ${{ fromJSON(inputs.draft || 'false') && '--draft' || '' }} \
          ${{ fromJSON(needs.validate-release.outputs.is_pre_release) && '--prerelease' || '' }}
        echo "::endgroup::"
        
    - name: 📋 Upload release assets
      run: |
        echo "::group::Uploading release assets"
        
        # Upload SBOM if it exists
        if [ -f "sbom-python.xml" ]; then
          echo "📦 Uploading SBOM..."
          gh release upload ${{ needs.validate-release.outputs.version }} sbom-python.xml
        fi
        
        # Upload security reports if they exist
        if [ -d "security-reports" ]; then
          echo "🛡️ Uploading security reports..."
          gh release upload ${{ needs.validate-release.outputs.version }} security-reports/*
        fi
        
        echo "✅ Release assets uploaded"
        echo "::endgroup::"

  # =====================================================
  # 📧 NOTIFY TEAM
  # =====================================================
  notify-team:
    name: 📧 Notify Team
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: 📧 Send release notification
      run: |
        echo "::group::Release Notification"
        echo "🎉 Release ${{ needs.validate-release.outputs.version }} has been created!"
        echo ""
        echo "📋 Release Details:"
        echo "- Version: ${{ needs.validate-release.outputs.version }}"
        echo "- Type: ${{ needs.validate-release.outputs.release_type }}"
        echo "- Pre-release: ${{ needs.validate-release.outputs.is_pre_release }}"
        echo "- URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"
        echo ""
        echo "📦 Docker Image:"
        echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}"
        echo ""
        echo "🛡️ Security Status:"
        echo "- All security scans passed"
        echo "- SBOM generated and attached"
        echo "- Vulnerability reports available"
        echo "::endgroup::"
        
        # Here you would add actual notification logic
        # - Slack webhook
        # - Email notification
        # - Teams webhook
        # - etc.
