name: 🏷️ Release Automation

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (dont create actual release)'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  packages: read

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
    - name: 📋 Calculate version
      id: version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Parse version components
        VERSION_NUM=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Remove any pre-release suffix
        PATCH=$(echo $PATCH | cut -d'-' -f1)
        
        echo "Current version: $MAJOR.$MINOR.$PATCH"
        
        # Calculate new version
        case "${{ inputs.release_type }}" in
          "major")
            NEW_VERSION="v$((MAJOR+1)).0.0"
            ;;
          "minor")
            NEW_VERSION="v${MAJOR}.$((MINOR+1)).0"
            ;;
          "patch")
            NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH+1))"
            ;;
        esac
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "## 🚀 Changes in this release" > CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        
        # Get commits since last tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [[ -n "$LATEST_TAG" ]]; then
          git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" >> CHANGELOG_TEMP.md
        else
          git log --pretty=format:"- %s" --max-count=10 >> CHANGELOG_TEMP.md
        fi
        
        echo "" >> CHANGELOG_TEMP.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${{ steps.version.outputs.version }}" >> CHANGELOG_TEMP.md
        
        CHANGELOG=$(cat CHANGELOG_TEMP.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 📊 Generate SBOM
      run: |
        echo "# Software Bill of Materials (SBOM)" > SBOM.md
        echo "Generated on: $(date)" >> SBOM.md
        echo "" >> SBOM.md
        echo "## Python Dependencies" >> SBOM.md
        if [[ -f "requirements.txt" ]]; then
          echo "### Production Dependencies" >> SBOM.md
          cat requirements.txt >> SBOM.md
        fi
        echo "" >> SBOM.md
        echo "## Node.js Dependencies" >> SBOM.md
        if [[ -f "smartcloudops-ai/package.json" ]]; then
          echo "### Frontend Dependencies" >> SBOM.md
          cat smartcloudops-ai/package.json | jq '.dependencies' >> SBOM.md
        fi
        
    - name: 📦 Create release package
      run: |
        # Create release directory
        mkdir -p release
        
        # Copy essential files
        cp -r app/ release/
        cp -r smartcloudops-ai/ release/
        cp -r docs/ release/
        cp -r deploy/ release/
        cp -r tests/ release/
        cp requirements.txt release/
        cp Dockerfile* release/
        cp docker-compose.yml release/
        cp README.md release/
        cp CHANGELOG.md release/ 2>/dev/null || echo "No CHANGELOG.md found"
        cp SBOM.md release/
        
        # Create tarball
        tar -czf smartcloudops-ai-${{ steps.version.outputs.version }}.tar.gz -C release .
        
        # Generate checksums
        sha256sum smartcloudops-ai-${{ steps.version.outputs.version }}.tar.gz > checksums.txt
        sha256sum SBOM.md >> checksums.txt
        
    - name: 📄 Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.version.outputs.version }}
        path: |
          smartcloudops-ai-${{ steps.version.outputs.version }}.tar.gz
          SBOM.md
          checksums.txt
        retention-days: 90
        
    - name: 📋 Release summary
      run: |
        echo "# 🏷️ Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: smartcloudops-ai-${{ steps.version.outputs.version }}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "- **SBOM**: SBOM.md" >> $GITHUB_STEP_SUMMARY
        echo "- **Checksums**: checksums.txt" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📝 Changelog Preview" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat CHANGELOG_TEMP.md >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
