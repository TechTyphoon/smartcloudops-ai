name: 🏷️ Release Automation

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_type:
        description: 'Pre-release type (if prerelease selected)'
        required: false
        default: 'rc'
        type: choice
        options:
          - rc
          - beta
          - alpha
      dry_run:
        description: 'Dry run (don\'t create actual release)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔧 Setup Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
    - name: 📋 Calculate version
      id: version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Parse version components
        VERSION_NUM=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Remove any pre-release suffix
        PATCH=$(echo $PATCH | cut -d'-' -f1)
        
        echo "Current version: $MAJOR.$MINOR.$PATCH"
        
        # Calculate new version
        case "${{ inputs.release_type }}" in
          "major")
            NEW_VERSION="v$((MAJOR+1)).0.0"
            ;;
          "minor")
            NEW_VERSION="v${MAJOR}.$((MINOR+1)).0"
            ;;
          "patch")
            NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH+1))"
            ;;
          "prerelease")
            if [[ "$LATEST_TAG" == *"-"* ]]; then
              # Increment existing prerelease
              PRERELEASE_NUM=$(echo $LATEST_TAG | grep -o '[0-9]*$' || echo "0")
              BASE_VERSION=$(echo $LATEST_TAG | cut -d'-' -f1)
              NEW_VERSION="${BASE_VERSION}-${{ inputs.prerelease_type }}.$((PRERELEASE_NUM+1))"
            else
              # First prerelease for this version
              NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH+1))-${{ inputs.prerelease_type }}.1"
            fi
            ;;
        esac
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "## 🚀 What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [[ -n "$LATEST_TAG" ]]; then
          echo "### 🆕 New Features" >> CHANGELOG.md
          git log ${LATEST_TAG}..HEAD --grep="feat" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          
          echo "### 🐛 Bug Fixes" >> CHANGELOG.md
          git log ${LATEST_TAG}..HEAD --grep="fix" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          
          echo "### 🔧 Improvements" >> CHANGELOG.md
          git log ${LATEST_TAG}..HEAD --grep="refactor\|perf\|style" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          
          echo "### 📚 Documentation" >> CHANGELOG.md
          git log ${LATEST_TAG}..HEAD --grep="docs" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          
          echo "### 🔒 Security" >> CHANGELOG.md
          git log ${LATEST_TAG}..HEAD --grep="security" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          
          echo "### 🏗️ Build & CI" >> CHANGELOG.md
          git log ${LATEST_TAG}..HEAD --grep="build\|ci" --pretty=format:"- %s" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md
          
          echo "### Other Changes" >> CHANGELOG.md
          git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" --invert-grep --grep="feat\|fix\|refactor\|perf\|style\|docs\|security\|build\|ci" >> CHANGELOG.md || true
        else
          echo "### Initial Release" >> CHANGELOG.md
          git log --pretty=format:"- %s" --max-count=20 >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${{ steps.version.outputs.version }}" >> CHANGELOG.md
        
        # Set output
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 📦 Update version files
      run: |
        # Update package.json if it exists
        if [ -f "package.json" ]; then
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.version.outputs.version }}"/' package.json
        fi
        
        # Update setup.py if it exists
        if [ -f "setup.py" ]; then
          sed -i 's/version="[^"]*"/version="${{ steps.version.outputs.version }}"/' setup.py
        fi
        
        # Update __init__.py if it exists
        if [ -f "app/__init__.py" ]; then
          sed -i 's/__version__ = "[^"]*"/__version__ = "${{ steps.version.outputs.version }}"/' app/__init__.py
        fi
        
        # Update Helm Chart.yaml
        if [ -f "deploy/helm/smartcloudops-ai/Chart.yaml" ]; then
          sed -i 's/version: .*/version: ${{ steps.version.outputs.version }}/' deploy/helm/smartcloudops-ai/Chart.yaml
          sed -i 's/appVersion: .*/appVersion: "${{ steps.version.outputs.version }}"/' deploy/helm/smartcloudops-ai/Chart.yaml
        fi
        
    - name: 🏷️ Create tag and push
      if: inputs.dry_run == false
      run: |
        git add -A
        git commit -m "🏷️ Release ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin ${{ steps.version.outputs.version }}
        git push origin HEAD
        
    - name: 📄 Create release notes file
      run: |
        echo "${{ steps.changelog.outputs.changelog }}" > RELEASE_NOTES.md
        
    - name: 🚀 Create GitHub Release
      if: inputs.dry_run == false
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Release ${{ steps.version.outputs.version }}"
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: true
        
    - name: 📋 Dry run summary
      if: inputs.dry_run == true
      run: |
        echo "# 🏷️ Release Dry Run Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Type**: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Prerelease**: ${{ contains(steps.version.outputs.version, '-') }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📝 Changelog Preview" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        head -20 RELEASE_NOTES.md >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📂 Files to be updated" >> $GITHUB_STEP_SUMMARY
        echo "- Chart.yaml" >> $GITHUB_STEP_SUMMARY
        echo "- package.json (if exists)" >> $GITHUB_STEP_SUMMARY
        echo "- setup.py (if exists)" >> $GITHUB_STEP_SUMMARY
        echo "- app/__init__.py (if exists)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note**: This was a dry run. No actual release was created."
