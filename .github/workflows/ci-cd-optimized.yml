name: Smart CloudOps AI - Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  # Security: Allow manual triggers for emergency deployments
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/smartcloudops
  PYTHON_VERSION: "3.11"
  # Use the clean app structure we just created
  APP_PATH: ./app
  EXAMPLES_PATH: ./examples
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =====================================================
  # 🔍 STAGE 1: FAST FEEDBACK - Code Quality & Security
  # =====================================================
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    outputs:
      should-deploy: ${{ steps.changes.outputs.app == 'true' || steps.changes.outputs.infra == 'true' }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper change detection
        
    - name: 🔍 Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          app:
            - 'app/**'
            - 'ml_models/**'
            - 'requirements*.txt'
            - 'Dockerfile*'
            - 'docker-compose*.yml'
          infra:
            - 'terraform/**'
            - 'k8s/**'
            - 'configs/**'
          tests:
            - 'tests/**'
          docs:
            - 'docs/**'
            - '*.md'
          examples:
            - 'examples/**'
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'
        
    - name: ⚡ Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Only install what we need for quality checks
        pip install black isort flake8 bandit safety
        # Install app dependencies for import checking
        pip install -r requirements.txt
        
    - name: 🎨 Code formatting (Black)
      run: |
        echo "::group::Checking code formatting"
        black --check --diff ${{ env.APP_PATH }}
        echo "::endgroup::"
        
    - name: 📐 Import sorting (isort) 
      run: |
        echo "::group::Checking import order"
        isort --check-only --diff ${{ env.APP_PATH }}
        echo "::endgroup::"
        
    - name: 🔍 Linting (Flake8)
      run: |
        echo "::group::Code linting"
        # Focus ONLY on app directory for production code quality
        flake8 ${{ env.APP_PATH }} --count --statistics \
               --max-line-length=88 --max-complexity=15 \
               --exclude=scripts,examples \
               --ignore=W503,E203,C901,W504
        echo "::endgroup::"
        
    - name: 🔒 Security scan
      run: |
        echo "::group::Security scanning"
        # Scan app code only, exclude examples and allow binding to 0.0.0.0 for containers
        bandit -r ${{ env.APP_PATH }} -f json -o bandit-results.json || true
        bandit -r ${{ env.APP_PATH }} --severity-level high --skip B104
        echo "::endgroup::"
      continue-on-error: false
        
    - name: 🛡️ Dependency security
      run: |
        echo "::group::Dependency vulnerabilities"
        safety scan --json > safety-results.json || true
        safety scan || echo "Some vulnerabilities found, but continuing..."
        echo "::endgroup::"
      continue-on-error: true
        
    - name: 📋 Generate version
      id: version
      run: |
        if [[ ${{ github.ref_type }} == 'tag' ]]; then
          VERSION=${{ github.ref_name }}
        else
          VERSION=${{ github.sha }}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
        
    - name: 📄 Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-results.json
          safety-results.json
        retention-days: 30

  # =====================================================
  # 🧪 STAGE 2: TESTING - App & Infrastructure
  # =====================================================
  test-app:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-deploy == 'true'
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🧪 Run ${{ matrix.test-type }} tests
      run: |
        if [[ "${{ matrix.test-type }}" == "unit" ]]; then
          echo "::group::Unit tests"
          python -m pytest tests/unit/ -v --tb=short --cov=${{ env.APP_PATH }} \
                          --cov-report=xml --cov-report=term
          echo "::endgroup::"
        else
          if [ -d "tests/integration/" ]; then
            echo "::group::Integration tests"
            python -m pytest tests/integration/ -v --tb=short
            echo "::endgroup::"
          else
            echo "Integration test directory not found, skipping integration tests."
            echo "::group::Running available integration tests from tests/"
            python -m pytest tests/test_integration.py -v --tb=short || echo "No integration tests found, continuing..."
            echo "::endgroup::"
          fi
        fi
        
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v4
      if: matrix.test-type == 'unit'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # =====================================================
  # 🏗️ STAGE 3: BUILD - Docker Images
  # =====================================================
  build-images:
    name: 🏗️ Build Images
    runs-on: ubuntu-latest
    needs: [quality-gate, test-app]
    if: needs.quality-gate.outputs.should-deploy == 'true'
    timeout-minutes: 20
    
    strategy:
      matrix:
        target: [development, production]
        
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.target }}
          type=ref,event=pr,suffix=-${{ matrix.target }}
          type=semver,pattern={{version}},suffix=-${{ matrix.target }}
          type=sha,suffix=-${{ matrix.target }}
          
    - name: 🏗️ Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.target == 'production' && './Dockerfile.production' || './Dockerfile' }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔍 Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.target }}.sarif'
      continue-on-error: true
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.target }}.sarif'

  # =====================================================
  # 🧪 STAGE 4: INFRASTRUCTURE VALIDATION
  # =====================================================
  validate-infrastructure:
    name: 🧪 Validate Infrastructure
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-deploy == 'true'
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: 🔍 Terraform format check
      run: |
        cd terraform
        terraform fmt -check -recursive
        
    - name: ✅ Terraform validate
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate
        
    - name: 📋 Terraform plan (dry-run)
      run: |
        cd terraform
        # Dry run without actual backend
        terraform plan -input=false -out=tfplan || echo "Plan requires AWS credentials"
      continue-on-error: true

  # =====================================================
  # 🚀 STAGE 5: DEPLOYMENT (Conditional)
  # =====================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate, test-app, build-images, validate-infrastructure]
    if: |
      needs.quality-gate.outputs.should-deploy == 'true' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: staging
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to staging
      run: |
        echo "::group::Staging deployment"
        echo "Would deploy version: ${{ needs.quality-gate.outputs.version }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-production"
        echo "::endgroup::"
        # Add actual deployment logic here
        
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate, test-app, build-images, validate-infrastructure, deploy-staging]
    if: |
      needs.quality-gate.outputs.should-deploy == 'true' && 
      github.ref_type == 'tag' && 
      startsWith(github.ref_name, 'v')
    environment: production
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to production
      run: |
        echo "::group::Production deployment"
        echo "Deploying tag: ${{ github.ref_name }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.quality-gate.outputs.version }}-production"
        echo "::endgroup::"
        # Add actual deployment logic here

  # =====================================================
  # 📊 STAGE 6: NOTIFICATION & CLEANUP
  # =====================================================
  notify:
    name: 📊 Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate, test-app, build-images]
    if: always()
    
    steps:
    - name: 📊 Report status
      run: |
        echo "::group::Pipeline Summary"
        echo "Quality Gate: ${{ needs.quality-gate.result }}"
        echo "Tests: ${{ needs.test-app.result }}"
        echo "Build: ${{ needs.build-images.result }}"
        echo "Should Deploy: ${{ needs.quality-gate.outputs.should-deploy }}"
        echo "::endgroup::"
