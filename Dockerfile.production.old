# Dockerfile.production - Multi-stage Production Container
# Smart CloudOps AI v3.0.0 - Production Container with Database Integration

# Stage 1: Build Environment
FROM python:3.13-slim as builder

LABEL maintainer="SmartCloudOps Team <team@smartcloudops.ai>"
LABEL version="3.0.0"
LABEL description="Smart CloudOps AI Production Container with Database Integration"

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=3.0.0

# Add labels for container metadata
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.version=$VERSION \
      org.label-schema.name="SmartCloudOps AI" \
      org.label-schema.description="AI-Powered CloudOps Automation Platform" \
      org.label-schema.vendor="SmartCloudOps" \
      org.label-schema.schema-version="1.0"

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    libpq-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create build directory
WORKDIR /build

# Copy requirements and install Python dependencies
COPY requirements-production.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-production.txt

# Stage 2: Production Runtime
FROM python:3.13-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r smartcloudops && \
    useradd -r -g smartcloudops -d /app -s /bin/bash smartcloudops && \
    mkdir -p /app /app/logs /app/data && \
    chown -R smartcloudops:smartcloudops /app

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder
COPY --from=builder /usr/local/lib/python3.13/site-packages /usr/local/lib/python3.13/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application files
COPY --chown=smartcloudops:smartcloudops complete_production_app_with_database.py .
COPY --chown=smartcloudops:smartcloudops database_config.py .
COPY --chown=smartcloudops:smartcloudops database_integration.py .
COPY --chown=smartcloudops:smartcloudops models.py .
COPY --chown=smartcloudops:smartcloudops dashboard_modern.html .
COPY --chown=smartcloudops:smartcloudops gunicorn.conf.py .
COPY --chown=smartcloudops:smartcloudops ml_training_data_real.csv .
COPY --chown=smartcloudops:smartcloudops bandit_report.json .

# Create startup script
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
set -e

# Wait for database to be ready
echo "🔄 Waiting for database connection..."
python -c "
import time
from database_config import DatabaseConfig, init_database, check_database_health
from flask import Flask

app = Flask(__name__)
max_retries = 30
retry_count = 0

while retry_count < max_retries:
    try:
        with app.app_context():
            init_database(app)
            health = check_database_health()
            if health['status'] == 'healthy':
                print('✅ Database connection established')
                break
    except Exception as e:
        retry_count += 1
        print(f'⏳ Database not ready, attempt {retry_count}/{max_retries}')
        time.sleep(2)
else:
    print('❌ Database connection failed after all retries')
    exit(1)
"

# Start the application
echo "🚀 Starting Smart CloudOps AI Production Server..."
exec gunicorn --config gunicorn.conf.py complete_production_app_with_database:app
EOF

RUN chmod +x /app/start.sh && chown smartcloudops:smartcloudops /app/start.sh

# Switch to non-root user
USER smartcloudops

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Expose port
EXPOSE 5000

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    FLASK_ENV=production \
    GUNICORN_WORKERS=4 \
    GUNICORN_BIND=0.0.0.0:5000

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/app/start.sh"]

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        gcc \
        g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better Docker layer caching
COPY requirements-ultra-minimal.txt requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir --upgrade setuptools>=78.1.2 \
    && pip install --no-cache-dir -r requirements.txt

# Copy only essential application code
COPY app/ ./app/

# Create non-root user for security
RUN adduser --disabled-password --gecos '' appuser \
    && chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Run the application
CMD ["gunicorn", "--bind", "0.0.0.0:3000", "--workers", "2", "--timeout", "60", "app.main:app"] 