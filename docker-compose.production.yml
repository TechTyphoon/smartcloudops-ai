version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:17.5-alpine
    container_name: smartcloudops_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: smartcloudops_production
      POSTGRES_USER: smartcloudops
      POSTGRES_PASSWORD: cloudops123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "15432:5432"
    networks:
      - smartcloudops_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartcloudops -d smartcloudops_production"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: smartcloudops_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass cloudops123
    volumes:
      - redis_data:/data
    ports:
      - "16379:6379"
    networks:
      - smartcloudops_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a cloudops123 ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Smart CloudOps AI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-2024-01-01T00:00:00Z}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-3.0.0}
    image: smartcloudops:production
    container_name: smartcloudops_app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_PORT=5000
      - DATABASE_URL=postgresql://smartcloudops:cloudops123@postgres:5432/smartcloudops_production
      - REDIS_URL=redis://:cloudops123@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-smartcloudops_production_secret}
      - GUNICORN_WORKERS=4
      - GUNICORN_THREADS=2
      - GUNICORN_TIMEOUT=30
      - GUNICORN_BIND=0.0.0.0:5000
    ports:
      - "15000:5000"
    networks:
      - smartcloudops_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - app_logs:/app/logs
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: smartcloudops_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx-server.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - smartcloudops_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: smartcloudops_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "19090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - smartcloudops_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: smartcloudops_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=cloudops123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000/
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "13000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - smartcloudops_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    user: "472:472"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  smartcloudops_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16