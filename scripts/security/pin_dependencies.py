#!/usr/bin/env python3
"""
Pin Python dependencies with SHA256 hashes for security.
This script generates a requirements.lock file with pinned versions and hashes.
"""

import os
import subprocess
import sys
from pathlib import Path


def pin_dependencies():
    """Generate requirements.lock with pinned dependencies and hashes."""

    print("üîí Pinning dependencies with SHA256 hashes...")

    # Get the project root directory
    project_root = Path(__file__).parent.parent.parent
    requirements_file = project_root / "requirements.txt"
    lock_file = project_root / "requirements.lock"

    if not requirements_file.exists():
        print(f"‚ùå Error: {requirements_file} not found")
        return False

    try:
        # Install pip-tools if not present
        subprocess.run(
            [sys.executable, "-m", "pip", "install", "--quiet", "pip-tools"], check=True
        )

        # Generate requirements.lock with hashes
        print(f"üìù Reading dependencies from {requirements_file}")

        # First compile to get exact versions
        subprocess.run(
            [
                sys.executable,
                "-m",
                "piptools",
                "compile",
                "--generate-hashes",
                "--no-emit-index-url",
                "--no-emit-trusted-host",
                "--resolver=backtracking",
                "-o",
                str(lock_file),
                str(requirements_file),
            ],
            check=True,
        )

        print(f"‚úÖ Successfully created {lock_file} with pinned hashes")

        # Add header to lock file
        with open(lock_file, "r") as f:
            content = f.read()

        header = """#
# This file is autogenerated by pip-compile with Python {}
# by the following command:
#
#    python scripts/security/pin_dependencies.py
#
# DO NOT EDIT THIS FILE MANUALLY
# To update, run: python scripts/security/pin_dependencies.py
#
""".format(
            sys.version.split()[0]
        )

        with open(lock_file, "w") as f:
            f.write(header + content)

        print("üìã Summary:")
        print(f"   - Lock file: {lock_file}")
        print(f"   - Dependencies pinned with SHA256 hashes")
        print(
            f"   - Use 'pip install --require-hashes -r requirements.lock' for secure installation"
        )

        return True

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error running pip-compile: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False


def verify_lock_file():
    """Verify that the lock file can be installed."""

    project_root = Path(__file__).parent.parent.parent
    lock_file = project_root / "requirements.lock"

    if not lock_file.exists():
        print("‚ö†Ô∏è  No requirements.lock file found. Run pin_dependencies() first.")
        return False

    print("üîç Verifying requirements.lock...")

    try:
        # Dry run to verify the lock file
        result = subprocess.run(
            [
                sys.executable,
                "-m",
                "pip",
                "install",
                "--dry-run",
                "--require-hashes",
                "-r",
                str(lock_file),
            ],
            capture_output=True,
            text=True,
        )

        if result.returncode == 0:
            print("‚úÖ Lock file verification successful")
            return True
        else:
            print(f"‚ùå Lock file verification failed:\n{result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå Error verifying lock file: {e}")
        return False


def main():
    """Main entry point."""

    print("=" * 60)
    print("üîê SmartCloudOps AI - Dependency Security Tool")
    print("=" * 60)

    # Pin dependencies
    if pin_dependencies():
        # Verify the lock file
        verify_lock_file()

        print("\nüìå Next steps:")
        print("1. Review the generated requirements.lock file")
        print(
            "2. Update Dockerfile to use: pip install --require-hashes -r requirements.lock"
        )
        print("3. Commit both requirements.txt and requirements.lock")
        print("4. Set up CI/CD to verify lock file on each build")
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
