# Dockerfile.production - Multi-stage Production Container
# Smart CloudOps AI v3.0.0 - Production Container with Database Integration

# Stage 1: Build Environment
FROM python:3.12-slim AS builder

LABEL maintainer="SmartCloudOps Team <team@smartcloudops.ai>"
LABEL version="3.0.0"
LABEL description="Smart CloudOps AI Production Container with Database Integration"

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory for build
WORKDIR /build

# Copy requirements and install Python dependencies
COPY requirements-production-minimal.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-production-minimal.txt

# Stage 2: Production Runtime
FROM python:3.12-slim AS production

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r smartcloudops && \
    useradd -r -g smartcloudops -d /app -s /sbin/nologin smartcloudops

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application files
COPY --chown=smartcloudops:smartcloudops complete_production_app_with_database.py .
COPY --chown=smartcloudops:smartcloudops database_config.py .
COPY --chown=smartcloudops:smartcloudops database_integration.py .
COPY --chown=smartcloudops:smartcloudops models.py .
COPY --chown=smartcloudops:smartcloudops dashboard_modern.html .
COPY --chown=smartcloudops:smartcloudops gunicorn.conf.py .

# Copy and set up startup script
COPY --chown=smartcloudops:smartcloudops start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Create directories for logs and data
RUN mkdir -p /app/logs /app/data && \
    chown -R smartcloudops:smartcloudops /app

# Switch to non-root user
USER smartcloudops

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Expose port
EXPOSE 5000

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    FLASK_ENV=production \
    PYTHONDONTWRITEBYTECODE=1

# Security: Run as non-root
USER smartcloudops

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Run startup script
CMD ["/app/start.sh"]
