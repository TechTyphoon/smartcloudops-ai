# Production Dockerfile for SmartCloudOps AI
# Multi-stage build for optimized production image

# Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies with security updates
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements-production.txt .
RUN pip install --no-cache-dir -r requirements-production.txt

# Production stage
FROM python:3.11-slim

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    FLASK_ENV=production \
    FLASK_APP=app.main:app

# Install runtime dependencies with security updates
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    libpq5 \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && update-ca-certificates

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create application directory
WORKDIR /app

# Copy application code
COPY app/ ./app/
COPY ml_models/ ./ml_models/
COPY configs/ ./configs/
COPY gunicorn.conf.py .
COPY start.sh .

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/data /tmp \
    && chown -R appuser:appuser /app /tmp \
    && chmod +x start.sh

# Security: Remove unnecessary files and set proper permissions
RUN find /app -type f -name "*.pyc" -delete \
    && find /app -type d -name "__pycache__" -delete \
    && chmod 755 /app \
    && chmod 644 /app/*.py \
    && chmod 644 /app/*.conf.py

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Security: Set read-only root filesystem where possible
# Note: This requires the application to write only to /tmp, /app/logs, /app/data
VOLUME ["/app/logs", "/app/data"]

# Start application
CMD ["gunicorn", "--config", "gunicorn.conf.py", "app.main:app"]
