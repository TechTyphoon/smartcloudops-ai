#!/bin/bash
# Smart CloudOps AI - Complete Stack Deployment
# Deploys full application stack to AWS instances

set -e

echo "üöÄ Starting Complete Stack Deployment..."

# Configuration
APP_SERVER="44.244.231.27"
MONITORING_SERVER="35.92.147.156"
KEY_FILE="~/.ssh/smartcloudops-ai-key.pem"
IMAGE_NAME="smartcloudops-ai:latest"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to run command on remote server
run_remote() {
    local server=$1
    local command=$2
    print_status "Executing on $server: $command"
    ssh -i ~/.ssh/smartcloudops-ai-key.pem -o StrictHostKeyChecking=no ec2-user@$server "$command"
}

# Deploy Application Server
deploy_application() {
    print_status "üèóÔ∏è Deploying Complete Application Stack..."
    
    # Save and transfer the Docker image
    print_status "Saving Docker image..."
    docker save $IMAGE_NAME | gzip > smartcloudops-ai.tar.gz
    
    # Transfer image to application server
    print_status "Transferring image to application server..."
    scp -i ~/.ssh/smartcloudops-ai-key.pem -o StrictHostKeyChecking=no smartcloudops-ai.tar.gz ec2-user@$APP_SERVER:/tmp/
    
    # Load and run the complete application
    run_remote $APP_SERVER "
        # Load Docker image
        docker load < /tmp/smartcloudops-ai.tar.gz
        
        # Stop any existing containers
        docker stop smartcloudops-flask || true
        docker rm smartcloudops-flask || true
        
        # Run complete application with all endpoints
        docker run -d \
            --name smartcloudops-flask \
            --restart=always \
            -p 3000:3000 \
            -e ENVIRONMENT=production \
            -e AWS_REGION=us-west-2 \
            -v /var/log/smartcloudops:/app/logs \
            $IMAGE_NAME python app/main.py
            
        # Verify application is running
        sleep 10
        curl -f http://localhost:3000/health || echo 'Application health check failed'
        curl -f http://localhost:3000/status || echo 'Status endpoint failed'
    "
    
    # Clean up local image file
    rm -f smartcloudops-ai.tar.gz
}

# Deploy Monitoring Stack
deploy_monitoring() {
    print_status "üìä Deploying Monitoring Stack..."
    
    run_remote $MONITORING_SERVER "
        # Update system
        sudo yum update -y
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
        fi
        
        # Start Docker service
        sudo systemctl start docker
        
        # Stop existing containers
        docker stop grafana prometheus node-exporter || true
        docker rm grafana prometheus node-exporter || true
        
        # Create monitoring directories
        mkdir -p ~/monitoring/{prometheus,grafana}
        
        # Create Prometheus config
        cat > ~/monitoring/prometheus/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['localhost:9100']
      
  - job_name: 'flask-app'
    static_configs:
      - targets: ['$APP_SERVER:3000']
    metrics_path: '/metrics'
EOF

        # Run Prometheus
        docker run -d \
            --name prometheus \
            --restart=always \
            -p 9090:9090 \
            -v ~/monitoring/prometheus:/etc/prometheus \
            prom/prometheus:latest \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/prometheus \
            --web.console.libraries=/etc/prometheus/console_libraries \
            --web.console.templates=/etc/prometheus/consoles \
            --web.enable-lifecycle
        
        # Run Node Exporter
        docker run -d \
            --name node-exporter \
            --restart=always \
            -p 9100:9100 \
            -v '/proc:/host/proc:ro' \
            -v '/sys:/host/sys:ro' \
            -v '/:/rootfs:ro' \
            prom/node-exporter:latest \
            --path.procfs=/host/proc \
            --path.sysfs=/host/sys \
            --collector.filesystem.mount-points-exclude='^/(sys|proc|dev|host|etc)(\$|/)'
        
        # Run Grafana
        docker run -d \
            --name grafana \
            --restart=always \
            -p 3001:3000 \
            -e GF_SECURITY_ADMIN_PASSWORD=admin \
            -v grafana-storage:/var/lib/grafana \
            grafana/grafana:latest
        
        # Wait for services to start
        sleep 30
        
        # Verify services
        curl -f http://localhost:9090/-/healthy || echo 'Prometheus health check failed'
        curl -f http://localhost:9100/metrics | head -5 || echo 'Node Exporter metrics failed'
        curl -f http://localhost:3001/login || echo 'Grafana login page failed'
    "
}

# Main deployment function
main() {
    print_status "üöÄ Starting Complete Smart CloudOps AI Deployment"
    
    # Check if we can reach the servers
    print_status "üîç Checking server connectivity..."
    if ! ping -c 1 $APP_SERVER &> /dev/null; then
        print_error "Cannot reach application server $APP_SERVER"
        exit 1
    fi
    
    if ! ping -c 1 $MONITORING_SERVER &> /dev/null; then
        print_error "Cannot reach monitoring server $MONITORING_SERVER"
        exit 1
    fi
    
    print_status "‚úÖ Both servers are reachable"
    
    # Deploy components
    deploy_application
    deploy_monitoring
    
    # Final verification
    print_status "üîç Final Verification..."
    sleep 30
    
    print_status "Testing Application Server endpoints:"
    curl -f http://$APP_SERVER:3000/health && print_status "‚úÖ Health endpoint working" || print_error "‚ùå Health endpoint failed"
    curl -f http://$APP_SERVER:3000/status && print_status "‚úÖ Status endpoint working" || print_error "‚ùå Status endpoint failed"
    curl -f http://$APP_SERVER:3000/metrics && print_status "‚úÖ Metrics endpoint working" || print_error "‚ùå Metrics endpoint failed"
    
    print_status "Testing Monitoring Server:"
    curl -f http://$MONITORING_SERVER:9090/-/healthy && print_status "‚úÖ Prometheus healthy" || print_error "‚ùå Prometheus failed"
    curl -f http://$MONITORING_SERVER:9100/metrics && print_status "‚úÖ Node Exporter working" || print_error "‚ùå Node Exporter failed"
    curl -f http://$MONITORING_SERVER:3001/login && print_status "‚úÖ Grafana accessible" || print_error "‚ùå Grafana failed"
    
    print_status "üéâ Deployment completed!"
    print_status "üìç Service URLs:"
    print_status "   Flask App: http://$APP_SERVER:3000"
    print_status "   Grafana:   http://$MONITORING_SERVER:3001 (admin/admin)"
    print_status "   Prometheus: http://$MONITORING_SERVER:9090"
    print_status "   Node Exporter: http://$MONITORING_SERVER:9100/metrics"
}

# Run main function
main "$@"
