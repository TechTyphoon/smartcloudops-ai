apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: smartcloudops
type: Opaque
data:
  jwt-secret-key: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==  # your-super-secret-jwt-key-change-in-production
  postgres-password: c21hcnRjbG91ZG9wc19wcm9kX3Bhc3N3b3Jk  # smartcloudops_prod_password
  redis-password: c21hcnRjbG91ZG9wc19yZWRpc19wYXNzd29yZA==  # smartcloudops_redis_password
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: smartcloudops
data:
  config.yaml: |
    # Application Configuration
    environment: production
    debug: false
    log_level: INFO
    
    # Database Configuration
    database:
      type: postgresql
      host: postgres-primary
      port: 5432
      name: smartcloudops
      user: smartcloudops
      pool_size: 20
      max_overflow: 30
      pool_timeout: 30
      pool_recycle: 3600
    
    # Redis Configuration
    redis:
      host: redis-master
      port: 6379
      db: 0
      max_connections: 50
      socket_timeout: 5
      socket_connect_timeout: 5
    
    # JWT Configuration
    jwt:
      expiry_hours: 24
      algorithm: HS256
    
    # API Configuration
    api:
      rate_limit: 100
      rate_limit_window: 60
      max_request_size: 10MB
    
    # Monitoring Configuration
    monitoring:
      prometheus_enabled: true
      metrics_port: 9090
      health_check_interval: 30
    
    # AI Configuration
    ai:
      openai_api_key: ""
      gemini_api_key: ""
      model_cache_ttl: 3600
    
    # Security Configuration
    security:
      cors_origins: ["https://yourdomain.com", "http://localhost:3000"]
      allowed_hosts: ["yourdomain.com", "localhost"]
      session_timeout: 3600
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smartcloudops-app
  namespace: smartcloudops
  labels:
    app: smartcloudops
    component: app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: smartcloudops
      component: app
  template:
    metadata:
      labels:
        app: smartcloudops
        component: app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: app
        image: smartcloudops/app:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: FLASK_ENV
          value: production
        - name: FLASK_DEBUG
          value: "false"
        - name: LOG_LEVEL
          value: INFO
        - name: DATABASE_URL
          value: postgresql://smartcloudops:$(POSTGRES_PASSWORD)@postgres-primary:5432/smartcloudops
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: postgres-password
        - name: REDIS_HOST
          value: redis-master
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: redis-password
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: jwt-secret-key
        - name: JWT_EXPIRY_HOURS
          value: "24"
        - name: PROMETHEUS_URL
          value: http://prometheus:9090
        - name: GRAFANA_URL
          value: http://grafana:3000
        - name: ALLOWED_HOSTS
          value: "yourdomain.com,localhost"
        - name: CORS_ORIGINS
          value: "https://yourdomain.com,http://localhost:3000"
        volumeMounts:
        - name: app-config
          mountPath: /app/config
        - name: app-logs
          mountPath: /app/logs
        - name: ml-models
          mountPath: /app/ml_models
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: app-config
        configMap:
          name: app-config
      - name: app-logs
        emptyDir: {}
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      restartPolicy: Always
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: smartcloudops-app-hpa
  namespace: smartcloudops
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: smartcloudops-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
---
apiVersion: v1
kind: Service
metadata:
  name: smartcloudops-app
  namespace: smartcloudops
  labels:
    app: smartcloudops
    component: app
spec:
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: smartcloudops
    component: app
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: smartcloudops-app-ingress
  namespace: smartcloudops
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
spec:
  tls:
  - hosts:
    - yourdomain.com
    secretName: smartcloudops-tls
  rules:
  - host: yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: smartcloudops-app
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: smartcloudops-app
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: smartcloudops-app
            port:
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: smartcloudops-app
            port:
              number: 9090
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-models-pvc
  namespace: smartcloudops
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ml-models-storage
  resources:
    requests:
      storage: 10Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ml-models-storage
provisioner: kubernetes.io/aws-ebs  # Change based on your cloud provider
parameters:
  type: gp3
  iops: "3000"
  throughput: "125"
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
