# SmartCloudOps AI - Grafana Deployment
# Phase 3 Week 6: Monitoring & Logging - Grafana Visualization

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: smartcloudops-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
    app.kubernetes.io/part-of: smartcloudops-platform
    app.kubernetes.io/version: "10.0.0"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: visualization
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: visualization
        app.kubernetes.io/part-of: smartcloudops-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
            - name: GF_SERVER_ROOT_URL
              value: "https://grafana.smartcloudops.ai"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
            - name: GF_DATABASE_TYPE
              value: "postgres"
            - name: GF_DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: grafana-config
                  key: database-host
            - name: GF_DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: grafana-config
                  key: database-name
            - name: GF_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: database-user
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: database-password
            - name: GF_DATABASE_SSL_MODE
              value: "require"
            - name: GF_SESSION_PROVIDER
              value: "postgres"
            - name: GF_SESSION_PROVIDER_CONFIG
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: session-config
            - name: GF_ANALYTICS_REPORTING_ENABLED
              value: "false"
            - name: GF_ANALYTICS_CHECK_FOR_UPDATES
              value: "false"
            - name: GF_LOG_MODE
              value: "console"
            - name: GF_LOG_LEVEL
              value: "info"
            - name: GF_METRICS_ENABLED
              value: "true"
            - name: GF_AUTH_OAUTH_AUTO_LOGIN
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_ENABLED
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_NAME
              value: "AWS Cognito"
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: oauth-client-id
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: oauth-client-secret
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 30
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: config
              mountPath: /etc/grafana/
              readOnly: true
            - name: dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards/
              readOnly: true
            - name: datasources-config
              mountPath: /etc/grafana/provisioning/datasources/
              readOnly: true
            - name: storage
              mountPath: /var/lib/grafana
            - name: tmp
              mountPath: /tmp
            - name: logs
              mountPath: /var/log/grafana
      volumes:
        - name: config
          configMap:
            name: grafana-config
            items:
              - key: grafana.ini
                path: grafana.ini
        - name: dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: datasources-config
          configMap:
            name: grafana-datasources-config
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - key: "monitoring"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: smartcloudops-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
    app.kubernetes.io/part-of: smartcloudops-platform
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3000
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: smartcloudops-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: storage
    app.kubernetes.io/part-of: smartcloudops-platform
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: smartcloudops-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: smartcloudops-platform

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: smartcloudops-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: smartcloudops-platform
  annotations:
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:123456789012:certificate/your-cert-arn
spec:
  ingressClassName: alb
  tls:
    - hosts:
        - grafana.smartcloudops.ai
      secretName: grafana-tls
  rules:
    - host: grafana.smartcloudops.ai
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
