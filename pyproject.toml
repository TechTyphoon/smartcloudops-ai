[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "smartcloudops-ai"
dynamic = ["version"]
description = "Smart CloudOps AI - Intelligent Infrastructure Management"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Smart CloudOps Team", email = "dev@smartcloudops.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Flask",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
]
requires-python = ">=3.11"

[tool.setuptools_scm]
write_to = "app/_version.py"

# Black configuration - EXACT version pinning for CI consistency
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | smartcloudops_env
  | \.formatvenv
)/
'''

# isort configuration - compatible with Black
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests", "scripts", "ml_models"]
extend_skip_glob = [
    "*.eggs/*",
    "*.git/*",
    "*.hg/*",
    "*.mypy_cache/*",
    "*.tox/*",
    "*.venv/*",
    "*_build/*",
    "*buck-out/*",
    "*build/*",
    "*dist/*",
    "*venv/*",
    "*smartcloudops_env/*",
    "*.formatvenv/*",
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
ignore_missing_imports = true
show_error_codes = true

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/smartcloudops_env/*",
    "*/.formatvenv/*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=75",  # Reasonable coverage threshold
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "security: Security-related tests",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "smartcloudops_env", ".formatvenv"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True (if needed for ops)

